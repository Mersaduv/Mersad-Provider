generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  description String
  slug        String      @unique
  image       String?
  level       Int         @default(0)
  order       Int         @default(0)
  isActive    Boolean     @default(true)
  parentId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  attributes  Attribute[]
  parent      Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]  @relation("CategoryHierarchy")
  products    Product[]

  @@index([parentId])
  @@index([level])
  @@index([order])
}

model Attribute {
  id         String   @id @default(uuid())
  name       String
  value      String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId])
}

model Feature {
  id        String   @id @default(uuid())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  imageUrls   String[]
  description String
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bestSelling Boolean  @default(false)
  category    Category @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@index([bestSelling])
  @@index([createdAt])
}

model Slider {
  id        String   @id @default(uuid())
  title     String?
  link      String?
  imageUrl  String
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([order])
  @@index([isActive])
}

model Article {
  id          String   @id @default(uuid())
  title       String
  description String
  slug        String   @unique
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([order])
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Order {
  id          String      @id @default(uuid())
  productId   String
  productName String
  quantity    Int
  desiredPrice Float
  customerName String
  customerPhone String
  status      OrderStatus @default(PENDING)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String?
  user        User?       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}
